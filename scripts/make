#!/usr/bin/env ruby
=begin
  vim: sw=2:
  Copyright (c) 2011, Gennady Bystritsky <bystr@mac.com>

  Distributed under the MIT Licence.
  This is free software. See 'LICENSE' for details.
  You must read and accept the license prior to use.

  Author: Gennady Bystritsky
=end

$:.concat ENV.to_hash['PATH'].to_s.split(File::PATH_SEPARATOR)
require 'sk/scoping-launcher.rb'

class Application < SK::ScopingLauncher
  in_generator_context do |_content|
    ruby = Pathname.new(figure_ruby_path)
    bin = Pathname.new(self.class.installation_top).join('bin')
    original = bin.join('originals', File.basename(target))

    _content << '#!' + ruby.to_s
    _content << 'ORIGINAL = ' + original.to_s.inspect
    _content << '$: << ' + ruby.dirname.to_s.inspect
    _content << '$: << ' + bin.to_s.inspect

    _content << IO.readlines(__FILE__).slice(1..-1)
  end

  protected
  #########

  def original_command
    defined?(ORIGINAL) && File.file?(ORIGINAL) ? ORIGINAL : super
  end

  def setup
    setup_scope_descriptors :makefile, :Makefile

    environment.update global_scope_settings if global_scope?
    environment.update source_scope_settings if source_scope?

    environment.load_general_properties
    environment.load_build_properties

    if local_scope?
      environment.update project_scope_settings

      config('build.yaml', :spot => local_scope_top.join('config')).tap { |_config|
        environment.update _config.properties, :prefix => :sk_prj, :upcase => true
      }
    else
      self.transparent = true
    end
  end

  def current_location
    @current_location ||= scan_cmdline_for_folder.tap { |_path|
      break _path ? Pathname.new(_path).expand_path : super
    }
  end

  def scan_cmdline_for_folder
    ARGV.inject(false) { |_found, _item|
      case
        when _found then return _item
        when _item == '-C' then true
        when _item =~ %r{^--directory=(.*)$} then return $1
      end
    }
    nil
  end

  def project_scope_settings
    { :project_makefile => project_makefile,
      :project_top => local_scope_top,
      :project_root => root,
      :path_from_top => path_from_local_scope_top,
      :path_to_top => path_to_local_scope_top
    }
  end

  def setup_scope_descriptors(*args)
    args.each do |_makefile|
      break environment.update :local_makefile => _makefile if exists_in_current?(_makefile)
    end

    return unless local_scope?
    return if scope_descriptors_to_top(*args).empty?

    environment.update :makefiles_to_top => scope_descriptors_to_top.join(' ')
  end

  def global_scope_settings
    { :global_makefile => global_makefile,
      :self_path => __FILE__
    }
  end

  def source_scope_settings
    { :srctop => srctop,
      :bintop => bintop,
      :gentop => gentop,
      :pkgtop => pkgtop,
    }
  end

  def inject_top_makefile(args)
    case
      when global_scope?
        [ '-f', global_makefile, args ]

      when local_scope?
        [ '-f', project_makefile, args ]

      else
        args
    end
  end

  def filter_suffix_one(args)
    nil.tap do |_target|
      begin
        return args.map { |_item|
          if _target
            environment.update :one => _item
            _target = nil
          else
            (_target = _item.scan(%r{^((?=[^-])[^=]+)-one$}).flatten.first) || _item
          end
        }
      ensure
        raise TSC::Error, [ _target, 'No item for one' ] if _target
      end
    end
  end

  def command_line_arguments(args)
    inject_top_makefile filter_suffix_one(args)
  end

  def global_makefile
    @global_makefile ||= global_scope_trigger
  end

  def project_makefile
    @project__makefile ||= local_scope_trigger
  end

  def local_scope_selectors
    [ 'config/Make.project',
      'config/make/Make.project',
      'config/project/Make.project'
    ]
  end

  def global_scope_selectors
    'config/make/Make.core'
  end
end

Application.new.start
