#!/usr/bin/env ruby
=begin
  vim: sw=2:
  Copyright (c) 2011, Gennady Bystritsky <bystr@mac.com>

  Distributed under the MIT Licence.
  This is free software. See 'LICENSE' for details.
  You must read and accept the license prior to use.

  Author: Gennady Bystritsky
=end

$:.concat ENV['PATH'].to_s.split(File::PATH_SEPARATOR)
require 'sk/scoping-launcher.rb'

class Application < SK::ScopingLauncher
  protected
  #########

  def setup
    setup_scope_descriptors :makefile, :Makefile

    update_environment global_scope_settings if global_scope?
    update_environment source_scope_settings if source_scope?
    if local_scope?
      update_environment project_scope_settings

      config('build.yaml', :spot => local_scope_top.join('config')).tap { |_config|
        update_environment _config.properties, :prefix => :product, :upcase => true
      }
    end

    config('.buildrc', :uproot => true, :home => true).tap { |_config|
      update_environment _config.properties(:make, :build), :prefix => false, :upcase => false
    }
  end

  def current_location
    @current_location ||= begin
      ARGV.index('-C').tap { |_index|
        break unless _index
        return File.expand_path ARGV.slice(_index.next).tap { |_path|
          raise 'Wrong -C specification' unless _path
        }
      }
      super
    end
  end

  def project_scope_settings
    { :project_makefile => project_makefile,
      :project_top => local_scope_top,
      :path_from_top => path_from_local_scope_top,
      :path_to_top => path_to_local_scope_top
    }
  end

  def setup_scope_descriptors(*args)
    args.each do |_makefile|
      break update_environment :local_makefile => _makefile if Pathname.new(current_location).join(_makefile.to_s).exist?
    end

    return unless local_scope?
    return if scope_descriptors_to_top(*args).empty?

    update_environment :makefiles_to_top => scope_descriptors_to_top.join(' ')
  end

  def global_scope_settings
    { :global_makefile => global_makefile
    }
  end

  def source_scope_settings
    { :srctop => srctop,
      :bintop => bintop,
      :gentop => gentop,
      :pkgtop => pkgtop,
    }
  end

  def command_line_arguments(args)
    case
      when global_scope?
        [ '-f', global_makefile, args ]

      when local_scope?
        [ '-f', project_makefile, args ]

      else
        args
    end
  end

  def global_makefile
    @global_makefile ||= global_scope_trigger
  end

  def project_makefile
    @project__makefile ||= local_scope_trigger
  end

  def local_scope_selectors
    [ 'config/Make.project',
      'config/make/Make.project',
      'config/project/Make.project'
    ]
  end

  def global_scope_selectors
    'config/make/Make.core'
  end
end

Application.new.start
