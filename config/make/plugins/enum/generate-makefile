#!/usr/bin/env ruby
=begin
  vim: ft=ruby: sw=2:
  Copyright (c) 2012, Gennady Bystritsky <bystr@mac.com>

  Distributed under the MIT Licence.
  This is free software. See 'LICENSE' for details.
  You must read and accept the license prior to use.

  Author: Gennady Bystritsky
=end

$:.concat ENV.to_hash['PATH'].to_s.split(File::PATH_SEPARATOR)
require 'tsc/application.rb'

class Application < TSC::Application
  def initialize
    super { |_config|
      _config.options = [
        [ '--output', 'Output destination', 'file', '-o' ],
        [ '--command', 'Command to run', 'command', '-c' ],
        [ '--target', 'Make target', 'target', '-t' ],
        [ '--action', 'Sequence', 'sequence', '-a' ]
      ]
      _config.arguments = '<makefile-path> <items> ...'
      _config.description = 'Workflow makefile generator'
    }
  end

  def start
    handle_errors {
      process_command_line
      require 'rubygems'

      if options.output?
        File.open(options.output, 'w+') { |_io|
          produce _io
        }
      else
        produce $stdout
      end
    }
  end

  def produce(io)
    output io, %{
      | # vim: ft=make: sw=2:
    }
    if actions.empty?
      produce_for_target_items(io, target, target_items)
    else
      actions.each do |_action|
        produce_for_target_items(io, action_target(_action), action_items(_action), _action)
      end

      output io, %{
        | .PHONY: #{target} #{target_items.join(' ')}
        | #{target}:: #{target_items.join(' ')}
      }

      [ target_items, action_items(actions.first) ].transpose.each do |_item, _action_item|
        output io, "#{_item}: #{_action_item}"
      end
    end
  end

  def produce_for_target_items(io, target, target_items, action = nil)
    output io, %{
      | info::
      | \t@ echo Available targets: #{target} #{target_items.join(' ')}
      |
      | .PHONY: #{target} #{target_items.join(' ')}
      | #{target}:: #{target_items.join(' ')}
    }

    [ target_items, items ].transpose.each do |_target, _item|
      output io, %{
        | #{_target}:
        | \t${call #{ normalize_array(command, _item, action).join(',') }}
      }
    end
  end

  def command
    @command ||= options.command or raise 'No command'
  end

  def target
    @target ||= options.target or raise 'No target'
  end

  def action_target(action)
    (@action_target ||= {})[action] ||= make_action_item(action, target)
  end

  def items
    @items ||= begin
      make_items(ARGV).inject [] do |_result, _item|
        if _item =~ %r{^[!](.*)$}
          _result - Dir.glob($1)
        else
          _result + Dir.glob(_item)
        end
      end
    end
  end

  def make_items(array)
    normalize_array array.map { |_item|
      _item.split
    }
  end

  def action_items(action)
    (@action_items ||= {})[action] ||= target_items.map { |_item|
      make_action_item(action, _item)
    }
  end

  def make_action_item(action, item)
    [ item, action ].join('-')
  end

  def target_items
    @target_items ||= items.map { |_item|
      _item.sub %r{[.][^.]*?$}, ''
    }
  end

  def actions
    @actions ||= normalize_array options.action.to_s.split(':').map { |_action|
      _action.strip.tap { |_action|
        break nil if _action.empty?
      }
    }
  end

  def normalize_array(*args)
    args.flatten.compact
  end

  def output(io, *args)
    io.puts *args.flatten.compact.map { |_item|
      _item.gsub %r{^(\s*[|] ?)}, ''
    }
  end
end

Application.new.start
